const Booking = require('../../models/Booking');
const _ = require('lodash');
const moment = require('moment');

async function handleAction(action, parameters, fullInContexts) {
  if (_.isEmpty(parameters)) return;
  const response = [];
  switch (action) {
    case 'action.information':
      const info = await Booking.find({
        person: parameters.name,
        phone: parameters.phone,
      }).sort({
        sortDate: 'asc',
      });
      if (_.isEmpty(info)) {
        response.push({
          type: 'text',
          text: 'Kh√¥ng c√≥ th√¥ng tin ƒë·∫∑t b√†n',
        });
        return response;
      }
      let count = 0;
      info.forEach((i) => {
        if (!i.sortDate) console.log(i);
        if (
          moment(i.sortDate).isSameOrAfter(
            moment(new Date(), 'DD-MM-YYYY'),
            'minutes'
          )
        ) {
          response.push({
            type: 'text',
            text: `Th√¥ng tin ƒë·∫∑t b√†n c·ªßa b·∫°n l√†\nT√™n: ${i.person}\nNg√†y: ${i.date} v√†o l√∫c ${i.time}\nS·ªë l∆∞·ª£ng kh√°ch: ${i.guestAmount}`,
          });
          count++;
        }
      });
      if (count === 0) {
        response.push({
          type: 'text',
          text: 'Kh√¥ng c√≥ th√¥ng tin ƒë·∫∑t b√†n ho·∫∑c b√†n ƒë·∫∑t ƒë√£ h·∫øt h·∫°n',
        });
      }
      return response;

    case 'action.booking':
      const { time, date, name, phone, guests } = parameters;
      const data = { person: name, phone, guestAmount: guests };
      const [openTime, closeTime] = ['07:59', '22:01'];
      const inputDateTime = `${time} ${date}`;
      const [inputDate, inputTime] = moment(inputDateTime, [
        'HH:mm DD-MM-YYYY',
        'HH:mm DD-MM',
        'HH DD-MM-YYYY',
        'HH DD-MM',
      ])
        .utcOffset('+0700')
        .ceil(30, 'minutes')
        .format('DD-MM-YYYY HH:mm')
        .split(' ');
      const isOpenTime = moment(inputTime, 'HH:mm').isBetween(
        moment(openTime, 'HH:mm'),
        moment(closeTime, 'HH:mm')
      );
      if (!isOpenTime) {
        response.push({
          type: 'text',
          text: 'Kh√¥ng trong th·ªùi gian m·ªü c·ª≠a',
        });
        return response;
      }
      const isValidDate = moment(inputDateTime, [
        'HH:mm DD-MM-YYYY',
        'HH:mm DD-MM',
        'HH DD-MM-YYYY',
        'HH DD-MM',
      ]).isSameOrAfter(moment(new Date()), 'minutes');
      if (!isValidDate) {
        response.push({
          type: 'text',
          text: 'Ch·ªâ nh·∫≠n b√†n t·ª´ th·ªùi ƒëi·ªÉm n√†y tr·ªü ƒëi',
        });
        return response;
      }
      const isBooked = await Booking.findOne({
        date: inputDate,
        time: inputTime,
      });
      if (isBooked) {
        response.push({
          type: 'text',
          text: 'Th·ªùi gian n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t, b·∫°n h√£y ƒë·∫∑t l·∫°i v√† ch·ªçn th·ªùi gian kh√°c nh√©',
        });
        return response;
      }
      data.date = inputDate;
      data.time = inputTime;
      data.sortDate = moment(`${inputDate}`, 'DD-MM-YYYY')
        .add(`${inputTime}`, 'hours')
        .format();
      try {
        const booked = await Booking.create(data);
        if (booked)
          response.push(
            {
              type: 'text',
              text: `Ch√∫c m·ª´ng b·∫°n  ƒë√£ ƒë·∫∑t b√†n th√†nh c√¥ng üéä\nH·∫πn g·∫∑p b·∫°n t·∫°i nh√† h√†ng v√† ch√∫c b·∫°n c√≥ 1 b·ªØa ƒÉn ngon mi·ªáng üëå`,
            },
            {
              type: 'text',
              text: `Th√¥ng tin ƒë·∫∑t b√†n c·ªßa b·∫°n l√†:\nT√™n: ${data.person}\nS·ªë ƒëi·ªán tho·∫°i: ${data.phone}\nS·ªë l∆∞·ª£ng kh√°ch: ${data.guestAmount}\nTh·ªùi gian nh·∫≠n b√†n: ${data.time} gi·ªù ng√†y ${data.date}\nB·∫°n c√≥ th·ªÉ ki·ªÉm tra l·∫°i th√¥ng tin ·ªü d∆∞·ªõi`,
            },
            {
              type: 'text',
              text: `C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•. M·ªùi b·∫°n ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng c·ªßa m√¨nh (chatbot) ƒë·ªÉ gi√∫p t·ªõ ng√†y c√†ng t·ªët ng√†y c√†ng t·ªët h∆°n!`,
            },
            {
              type: 'options',
              options: [
                {
                  title: 'ƒê√°nh gi√° chatbot',
                  event: 'RATE',
                },
                {
                  title: 'Ki·ªÉm tra th√¥ng tin ƒë·∫∑t b√†n',
                  event: 'INFORMATION',
                },
              ],
            }
          );
        return response;
      } catch (error) {
        console.log(error);
        response.push({
          type: 'text',
          text: `ƒê·∫∑t b√†n kh√¥ng th√†nh c√¥ng, h√£y th·ª≠ l·∫°i l·∫ßn n·ªØa nh√©`,
        });
        return response;
      }

    case 'action.rate':
      const lastedBooking = await Booking.findOne().sort({ _id: -1 });
      const { rate } = parameters;
      try {
        const update = await Booking.findOneAndUpdate(
          {
            person: lastedBooking.person,
            phone: lastedBooking.phone,
            date: lastedBooking.date,
            time: lastedBooking.time,
          },
          { rate: rate },
          { new: true }
        );
        if (update)
          response.push({
            type: 'text',
            text: `B·∫°n ƒë√£ cho ${rate} ƒëi·ªÉm üíñ`,
          });
        return response;
      } catch (error) {
        console.log(error);
        response.push({
          type: 'text',
          text: `ƒê√°nh gi√° kh√¥ng th√†nh c√¥ng`,
        });
        return response;
      }

    default:
      break;
  }
}

module.exports = {
  handleAction,
};
